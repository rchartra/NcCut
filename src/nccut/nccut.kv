# This document outlines and creates static UI features for GUI. This document uses
# Kivy's kv language to define UI features in a more readable fashion.
# Refer to kivy docs for syntax.

#:import Factory kivy.factory.Factory
#:import ViewDropDown nccut.dropdowns.ViewDropDown
#:import NetCDFDropDown nccut.dropdowns.NetCDFDropDown


<BackgroundLabel>
    background_color: 0.2, 0.2, 0.2, 1
    canvas.before:
        Color:
            rgba: root.background_color
        RoundedRectangle:
            size: self.size
            pos: self.pos
            radius: [5,]

<RoundedButton>:
    background_color: 0,0,0,0
    canvas.before:
        Color:
            rgba: (.4,.4,.4,1) if self.state=='normal' else (0,.4,.7,1)
        RoundedRectangle:
            pos: self.pos
            size: self.size
            radius: [15,]

<ViewDropDown>
    auto_width: False
    height: dp(210)
    width: dp(300)

    BoxLayout:
        size_hint_y: None
        height: dp(210)
        width: dp(300)
        spacing: dp(10)
        padding: dp(10)
        orientation: 'vertical'
        canvas:
            Color:
                rgb: [.2, .2, .2]
            RoundedRectangle:
                size: self.size
                pos: self.pos
                radius: [10,]

        BoxLayout:
            padding: dp(5)
            canvas:
                Color:
                    rgb: [.3, .3, .3]
                RoundedRectangle:
                    size: self.size
                    pos: self.pos
                    radius: [5,]

            Label:
                text: 'Line Color: '
                size_hint: (0.5, 1)
                font_size: self.size[0] / 7

            RoundedButton:
                id: 'select_l_color'
                text: "Select ..."
                size_hint: (0.5, 0.8)
                font_size: self.size[1] / 1.6
                pos_hint: {'top': 0.9}
                on_press: root.l_color_drop.open(self)

        BoxLayout:
            padding: dp(5)
            canvas:
                Color:
                    rgb: [.3, .3, .3]
                RoundedRectangle:
                    size: self.size
                    pos: self.pos
                    radius: [5,]
            Label:
                text: 'Circle Size: '
                size_hint: (0.2, 1)
                font_size: self.size[0] / 5

            Label:
                text: str(round(cir_size.value, 1))
                size_hint: (0.1, 1)
                font_size: self.size[0] / 2

            Slider:
                id: cir_size
                min: 2
                max: 70
                value: 10
                step: 1
                size_hint: (0.5, 1)

            RoundedButton:
                text: "Go"
                size_hint: (0.1, 0.6)
                font_size: self.size[0] / 2.6
                on_press: root.pass_setting("cir_size", cir_size.value)
                pos_hint: {'top': 0.8}

        RoundedButton:
            text: "Rotate"
            font_size: self.size[0] / 15
            on_press: root.rotate()

        BoxLayout:
            spacing: dp(10)

            RoundedButton:
                text: "Flip Vertically"
                font_size: self.size[0] / 10
                on_press: root.flip_v()

            RoundedButton:
                text: "Flip Horizontally"
                font_size: self.size[0] / 10
                on_press: root.flip_h()


<NetCDFDropDown>
    auto_width: False
    height: dp(300)
    width: dp(300)

    BoxLayout:
        size_hint_y: None
        height: dp(300)
        width: dp(300)
        spacing: dp(10)
        padding: dp(10)
        orientation: 'vertical'
        canvas:
            Color:
                rgb: [.2, .2, .2]
            RoundedRectangle:
                size: self.size
                pos: self.pos
                radius: [10,]

        BoxLayout:
            padding: dp(10)
            canvas:
                Color:
                    rgb: [.3, .3, .3]
                RoundedRectangle:
                    size: self.size
                    pos: self.pos
                    radius: [5,]
            Label:
                text: 'Contrast: '
                size_hint: (0.2, 1)
                font_size: self.size[0] / 5

            Label:
                text: str(round(contrast.value, 1))
                size_hint: (0.1, 1)
                font_size: self.size[0] / 2

            Slider:
                id: contrast
                min: -127
                max: 127
                value: 0
                step: 1
                size_hint: (0.5, 1)

            RoundedButton:
                text: "Go"
                size_hint: (0.1, 0.6)
                font_size: self.size[0] / 2
                on_press: root.pass_setting("contrast", contrast.value)
                pos_hint: {'top': 0.8}

        BoxLayout:
            padding: dp(10)
            canvas:
                Color:
                    rgb: [.3, .3, .3]
                RoundedRectangle:
                    size: self.size
                    pos: self.pos
                    radius: [5,]

            Label:
                text: 'Color Map: '
                size_hint: (0.5, 1)
                font_size: self.size[0] / 7

            RoundedButton:
                id: 'select_cmap'
                text: "Select ..."
                size_hint: (0.5, 0.8)
                font_size: self.size[1] / 3
                pos_hint: {'top': 0.9}
                on_press: root.cmap_dropdown.open(self)

        BoxLayout:
            padding: dp(10)
            canvas:
                Color:
                    rgb: [.3, .3, .3]
                RoundedRectangle:
                    size: self.size
                    pos: self.pos
                    radius: [5,]

            Label:
                text: 'Variable: '
                size_hint: (0.5, 1)
                font_size: self.size[0] / 7

            RoundedButton:
                id: 'select_var'
                text: "Select ..."
                size_hint: (0.5, 0.8)
                font_size: self.size[1] / 3
                pos_hint: {'top': 0.9}
                on_press: root.var_dropdown.open(self)

        BoxLayout:
            padding: dp(10)
            canvas:
                Color:
                    rgb: [.3, .3, .3]
                RoundedRectangle:
                    size: self.size
                    pos: self.pos
                    radius: [5,]

            Label:
                text: 'Z: '
                size_hint: (0.5, 1)
                font_size: self.size[0] / 7

            RoundedButton:
                id: 'select_depth'
                text: "Select ..."
                size_hint: (0.5, 0.8)
                font_size: self.size[1] / 3
                pos_hint: {'top': 0.9}
                on_press: root.depth_dropdown.open(self)

<HomeScreen>

    BoxLayout:
        orientation: "vertical"
        size_hint: (0.8, 1)
        spacing: dp(10)
        padding: [dp(20), dp(10), dp(10), dp(20)]

        BoxLayout:
            size_hint: (1, 0.08)
            spacing: dp(10)
            padding: [dp(5), dp(5), dp(5), dp(5)]
            canvas:
                Color:
                    rgb: [.2, .2, .2]
                RoundedRectangle:
                    size: self.size
                    pos: self.pos
                    radius: [5,]

            RoundedButton:
                text: "View"
                id: view_btn
                size_hint: (0.1, 1)
                font_size: self.size[1] / 2.5
                on_press: Factory.ViewDropDown().open(self)

            RoundedButton:
                text: "NetCDF"
                id: netcdf_btn
                size_hint: (0.1, 1)
                font_size: self.size[1] / 2.5
                on_press: Factory.NetCDFDropDown().open(self)

            BoxLayout:
                id: colorbar
                size_hint: (0.7, 1)

        RelativeLayout:

            size_hint: (1, 0.82)

            StencilView:
                id: view
                size_hint: (1, 1)
                on_size: root.initial_load()
                canvas:
                    Color:
                        rgb: [.7, .7, .7]
                    RoundedRectangle:
                        size: self.size
                        pos: self.pos

        BoxLayout:
            size_hint: (1, 0.1)
            spacing: dp(10)
            padding: [dp(10), dp(10), dp(10), dp(10)]
            canvas:
                Color:
                    rgb: [.2, .2, .2]
                RoundedRectangle:
                    size: self.size
                    pos: self.pos
                    radius: [15,]

            TextInput:
                id: file_in
                size_hint: (0.9, 1)
                hint_text: "Enter Image or NetCDF File Path"

            RoundedButton:
                size_hint: (0.1, 1)
                text: "Go"
                font_size: self.size[1] / 2
                on_press: root.go_btn()

    BoxLayout:
        id: sidebar
        orientation: "vertical"
        size_hint: (0.2, 1)
        pos_hint: {"x": 0.8}
        padding: [dp(10), dp(20), dp(20), dp(20)]
        spacing: dp(20)

        BackgroundLabel:
            text: "Tools"
            size_hint: (1, 0.1)
            text_size: self.size
            halign: 'center'
            valign: 'center'
            font_size: self.size[0] / 10

        RoundedButton:
            text: "Transect"
            id: transect
            size_hint: (1, 0.1)
            font_size: self.size[0] / 12
            on_press: root.transect_btn("transect")

        RoundedButton:
            text: "Transect Marker"
            size_hint: (1, 0.1)
            font_size: self.size[0] / 12
            on_press: root.transect_btn("transect_marker")

        RoundedButton:
            text: "Quit"
            size_hint: (1, 0.1)
            font_size: self.size[0] / 10
            on_press: root.quit_btn()
