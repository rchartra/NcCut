name: Python application

on:
  push:
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  linux_test:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: ["3.9", "3.10", "3.11", "3.12"]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.x
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.version }}
    - name: Install X11
      run: |
        sudo apt-get update 
        sudo apt-get install xorg
        sudo apt-get install xorg openbox
    - name: Install Poetry
      run: |
        python -m pip install --upgrade pip
        python -m pip install poetry
    - name: Install NcCut
      run: |
        python -m poetry install --with test
    - name: Lint with flake8
      run: |
        python -m poetry run python -m flake8 --ignore=E402,E501
    - name: Test with unittest
      run: |
        python -m poetry run python -m pytest -s
        
  windows_test:
    runs-on: windows-latest
    strategy:
      matrix:
        version: [ "3.9", "3.10", "3.11", "3.12" ]
    env:
      KIVY_GL_BACKEND: 'angle_sdl2'
    
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.x
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.version }}
    - name: Install Poetry
      run: |
        python -m pip install --upgrade pip
        python -m pip install poetry
    - name: Install NcCut
      run: |
        python -m poetry install --with test
    - name: Lint with flake8
      run: |
        python -m poetry run python -m flake8 --ignore=E402,E501
    - name: Test with unittest
      run: |
        python -m poetry run python -m pytest -s

  windows_cmd_test:
    runs-on: windows-latest
    env:
      KIVY_GL_BACKEND: 'angle_sdl2'
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.x
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    - name: Install Poetry
      run: |
         python -m pip install --upgrade pip
         python -m pip install poetry
    - name: Install NcCut
      run: |
         python -m poetry install --with test
    - name: Prepare Configuration File
      run: |
        echo '[graphics_defaults]' > nccut_config.toml
        echo 'contrast = 0' >> nccut_config.toml
        echo "Configuration file prepared at %cd%\nccut_config.toml"
    - name: Test Config with Environment variable
      env:
        NCCUT_CONFIG: ${{ github.workspace }}\nccut_config.toml
      run: |
        python -m poetry run python -c 'from nccut.functions import find_config; assert find_config("") == {"graphics_defaults": {"contrast": 0}}, "Config load failed via environment variable"'
    - name: Test Config in Working Directory
      run: |
        python -m poetry run python -c 'from nccut.functions import find_config; assert find_config("") == {"graphics_defaults": {"contrast": 0}}, "Config load failed via working directory"'
    - name: Get AppData Directory
      run: echo ("APPDATA_DIR=" + $env:APPDATA) >> $env:GITHUB_ENV
    - name: Test with Default Path
      run: |
        mkdir "${{ env.APPDATA_DIR }}\nccut"
        copy nccut_config.toml "${{ env.APPDATA_DIR }}\nccut\nccut_config.toml"
        dir "${{ env.APPDATA_DIR }}\nccut"  # Verify that the file moved to the correct location
        python -m poetry run python -c "from nccut.functions import find_config; assert find_config('') == {'graphics_defaults': {'contrast': 0}}, 'Config load failed via default path'"
    - name: Test with command line argument
      run: |
        mkdir "${{ github.workspace }}\command_dir"
        copy nccut_config.toml "${{ github.workspace }}\command_dir\nccut_config.toml"
        python -m poetry run python -c 'from nccut.functions import find_config; assert find_config(r"${{ github.workspace }}\command_dir\nccut_config.toml") == {"graphics_defaults": {"contrast": 0}}, "Config load failed via command line argument path"'

  linux_cmd_test:
    runs-on: ubuntu-latest
    env:
      KIVY_GL_BACKEND: 'angle_sdl2'
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.x
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.version }}
    - name: Install X11
      run: |
        sudo apt-get update 
        sudo apt-get install xorg
        sudo apt-get install xorg openbox
    - name: Install Poetry
      run: |
        python -m pip install --upgrade pip
        python -m pip install poetry
    - name: Install dependencies
      run: |
        python -m poetry install --with test
    - name: Prepare Configuration File
      run: |
        echo '[graphics_defaults]' > nccut_config.toml
        echo 'contrast = 0' >> nccut_config.toml
        echo "Configuration file prepared at $(pwd)\nccut_config.toml"
    - name: Test Config with Environment variable
      env:
        NCCUT_CONFIG: ${{ github.workspace }}/nccut_config.toml
      run: |
        python -m poetry run python -c 'from nccut.functions import find_config; assert find_config("") == {"graphics_defaults": {"contrast": 0}}, "Config load failed via environment variable"'
    - name: Test Config in Working Directory
      run: |
        python -m poetry run python -c 'from nccut.functions import find_config; assert find_config("") == {"graphics_defaults": {"contrast": 0}}, "Config load failed via working directory"'
    - name: Get Config Directory
      run: echo "CONFIG_DIR=${XDG_CONFIG_HOME:-$HOME/.config}" >> $GITHUB_ENV
    - name: Test with Default Path
      run: |
        mkdir -p "${{ env.CONFIG_DIR }}/nccut"
        cp nccut_config.toml "${{ env.CONFIG_DIR }}/nccut"
        ls "${{ env.CONFIG_DIR }}/nccut"  # Verify that the file moved to the correct location
        python -m poetry run python -c "from nccut.functions import find_config; assert find_config('') == {'graphics_defaults': {'contrast': 0}}, 'Config load failed via default path'"
    - name: Test with command line argument
      run: |
        mkdir -p "${{ github.workspace }}/command_dir"
        cp nccut_config.toml "${{ github.workspace }}/command_dir"
        python -m poetry run python -c 'from nccut.functions import find_config; assert find_config(r"${{ github.workspace }}/command_dir/nccut_config.toml") == {"graphics_defaults": {"contrast": 0}}, "Config load failed via command line argument path"'

  licenses:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: REUSE Compliance Check
        uses: fsfe/reuse-action@v4
  paper:
      runs-on: ubuntu-latest
      name: Paper Draft
      steps:
        - name: Checkout
          uses: actions/checkout@v4
        - name: Build draft PDF
          uses: openjournals/openjournals-draft-action@master
          with:
            journal: joss
            paper-path: paper.md
        - name: Upload
          uses: actions/upload-artifact@v4
          with:
            name: paper
            path: paper.pdf
